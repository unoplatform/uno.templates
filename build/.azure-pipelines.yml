trigger:
  branches:
    include:
      - main
      - release/*
      - legacy/*

pr: 
  branches:
    include:
      - main
      - release/*
      - legacy/*
  paths:
    exclude:
      - .github/**
      - tools/**

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  IsCanaryBranch: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/canaries/')]
  ValidationUnoCheckVersionNet8: '1.26.3'
  ValidationUnoCheckVersionNet9: '1.27.4'
  ValidationDotNetVersion: '8.0.401'

  # https://github.com/unoplatform/Uno.Wasm.Bootstrap/pull/887 remove when upgarding to .NET 9
  # compatible version of the bootstrapper
  UnoDisableNet9Validation: true

  # Required for WinUI 1.6
  WindowsSdkPackageVersion: '10.0.19041.38'

  # Required for WinAppSDK native AOT, to remove when included in uno.sdk
  AllowUnsafeBlocks: true

stages:
- stage: Build
  jobs:
  - job: Packages

    pool:
      vmImage: 'windows-2022'

    steps:
    - checkout: self
      clean: 'true'
      fetchDepth: 0

    - task: gitversion/setup@0
      retryCountOnTaskFailure: 3
      inputs:
        versionSpec: '5.10.3'

    - task: gitversion/execute@0
      retryCountOnTaskFailure: 3
      inputs:
        useConfigFile: true
        configFilePath: build/gitversion.yml
      displayName: Use GitVersion

    - powershell: |
        # Offset the commit count to match uno's current count
        if ($env:GITVERSION_SEMVER -match '^5\.3.*-dev\.\d+') {

            $env:GITVERSION_SEMVER = [regex]::Replace(
                $env:GITVERSION_SEMVER,
                '(.*?\.)(\d+)$',
                { 
                    param($match) "$($match.Groups[1].Value)$( $([int]$match.Groups[2].Value) + 1700)"
                })
            
            Write-Host "##vso[task.setvariable variable=GitVersion.SemVer]$env:GITVERSION_SEMVER"
            Write-Host "##vso[task.setvariable variable=GitVersion.SemVer;isOutput=true]$env:GITVERSION_SEMVER"
            Write-Host "##vso[build.updatebuildnumber]$env:GITVERSION_SEMVER"
        }
      displayName: Adjust Build Number for 5.3

    - template: templates/canary-updater.yml

    - powershell: |
        $adjustedPackageVersion="$(GitVersion.SemVer)".ToLower();

        # Pack the Uno.Sdk
        & dotnet build src\Uno.Sdk\Uno.Sdk.csproj -c Release -p:PackageVersion=$adjustedPackageVersion -p:Version=$(GitVersion.AssemblySemVer) /bl:$(build.artifactstagingdirectory)\uno.sdk-pack.binlog -o $(build.artifactstagingdirectory)
      displayName: Pack Uno.Sdk

    - powershell: |
        $adjustedPackageVersion="$(GitVersion.SemVer)".ToLower();

        # Pack the Uno.Templates
        & dotnet build src\Uno.Templates\Uno.Templates.csproj -c Release -p:PackageVersion=$adjustedPackageVersion -p:Version=$(GitVersion.AssemblySemVer) /bl:$(build.artifactstagingdirectory)\uno.templates-pack.binlog -o $(build.artifactstagingdirectory)

      displayName: Pack Uno.Templates

    - task: PublishBuildArtifacts@1
      condition: always()
      retryCountOnTaskFailure: 3
      inputs:
        PathtoPublish: $(build.artifactstagingdirectory)
        ArtifactName: $(Build.DefinitionName)
        ArtifactType: Container

- stage: Template_validations
  dependsOn: Build
  jobs:
  - template: .azure-pipelines.TemplateValidation.yml
    parameters:
      vmImage: 'windows-2022'
      stageVariant: 'windows'
  - template: .azure-pipelines.TemplateValidation.yml
    parameters:
      vmImage: 'ubuntu-latest'
      stageVariant: 'linux'
  - template: .azure-pipelines.TemplateValidation.yml
    parameters:
      vmImage: 'macos-15'
      stageVariant: 'macos15'
      
  - template: .azure-pipelines.UnoLibValidation.yml
  - template: .azure-pipelines.UnoMauiLibValidation.yml
  - template: .azure-pipelines.UWPValidation.yml

- stage: Prepare
  condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['IsCanaryBranch'], true)))
  dependsOn: Build
  jobs:
  - job: Sign
  
    pool:
      vmImage: 'windows-2022'

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: Download build artifact
      inputs:
        artifactName: $(Build.DefinitionName)
        downloadPath: '$(Agent.WorkFolder)'

    - task: CopyFiles@2
      displayName: Copy built packages
      inputs:
        SourceFolder: $(Agent.WorkFolder)/$(Build.DefinitionName)
        Contents: |
          *.nupkg
          *.vsix
        TargetFolder: $(build.artifactstagingdirectory)
        CleanTargetFolder: false
        OverWrite: false
        flattenFolders: false

    - task: PowerShell@2
      displayName: Authenticode Sign Packages
      inputs:
        filePath: build/Sign-Package.ps1
      env:
        SignClientUser: $(SignClientUser)
        SignClientSecret: $(SignClientSecret)
        SignPackageName: "Uno Platform Templates"
        SignPackageDescription: "Uno Platform Templates"
        ArtifactDirectory: $(build.artifactstagingdirectory)
      condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))

    - task: PublishBuildArtifacts@1
      condition: always()
      retryCountOnTaskFailure: 3
      inputs:
        PathtoPublish: $(build.artifactstagingdirectory)
        ArtifactName: '$(Build.DefinitionName)-Signed'
        ArtifactType: Container

- stage: Publish_Dev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), not(eq(variables['build.reason'], 'PullRequest')))
  dependsOn: Prepare
  jobs:
  - deployment: 'Nuget'
    displayName: 'Nuget Publish Dev'
    environment: 'Uno Templates Development'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/nuget-publish-dev.yml
          - template: templates/nuget-publish-public.yml

- stage: Publish_Prod_Dev
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), not(eq(variables['build.reason'], 'PullRequest')))
  dependsOn: Prepare
  jobs:
  - deployment: 'Nuget_Prod_Dev'
    displayName: 'Nuget Publish Prod Dev'
    environment: 'Uno Templates Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/nuget-publish-dev.yml
  
- stage: Publish_Prod_Public
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), not(eq(variables['build.reason'], 'PullRequest')))
  dependsOn: Publish_Prod_Dev
  jobs:
  - deployment: 'Nuget_Prod_Nuget_Org'
    displayName: 'Nuget Publish Prod NuGet.org'
    environment: 'Uno Templates Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/nuget-publish-public.yml

  - job: Tag_Release
    displayName: 'Set git tag'
    dependsOn: 'Nuget_Prod_Nuget_Org'

    steps:
    - checkout: self
      persistCredentials: true
      fetchDepth: 0

    - pwsh: |
        dotnet tool uninstall nbgv -g
        dotnet tool install nbgv -g --version 3.6.139
        nbgv cloud -a
      displayName: Version with NBGV
      name: NBGV

    - script: |
        git config user.email "info@platform.uno"
        git config user.name "Uno DevOps"
        git tag $(NBGV_SemVer2)
        git push origin $(NBGV_SemVer2)
      displayName: "Tag and push to GitHub"