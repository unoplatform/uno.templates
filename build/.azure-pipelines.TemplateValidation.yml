parameters:
  vmImage: ''
  stageVariant: ''

jobs:
- job: Matrix_Gen_${{ parameters.stageVariant }}
  displayName: Test Matrix Generation ${{ parameters.stageVariant }}
  steps:
      - pwsh: |
          $tests = @(
            # The format is "TestName;[PlatformFilter];Arguments"
            # The platform 

            "DefaultArgs;;",
            "Recommended;;-preset recommended",
            "SkiaOnlyHeads;;-platforms desktop",
            "MobileOnlyHeads;;-platforms android ios maccatalyst",
            "RecommendedMarkup;;-preset recommended -markup csharp",
            "RecommendedMarkupDsp;;-preset recommended -markup csharp -dsp",
            "RecommendedMarkupFluent;;-preset recommended -markup csharp -theme fluent",
            "MVVM;;-preset recommended -presentation mvvm",
            "CSharpMarkup;;-markup csharp",
            "NoHosting;;-preset recommended -di false"
          );

          $matrixGroups = [ordered]@{}
          $currentGroup = @()
          $groupSize = 5

          # Generate matrix for net8
          for ($i = 0; $i -lt $tests.Count; $i++) 
          { 
              $currentGroup += $tests[$i];

              if ($currentGroup.Count -eq $groupSize) {
                $matrixGroups["Group$($matrixGroups.Count)"] = @{
                  'unocheckArguments' = ''
                  'validations' = $currentGroup -join "`r`n"
                };
                $currentGroup = @()
              }
          }

          # generate matrix for net9
          for ($i = 0; $i -lt $tests.Count; $i++) 
          { 
              $currentGroup += $tests[$i] + " -tfm net9.0";

              if ($currentGroup.Count -eq $groupSize) {
                $matrixGroups["Group$($matrixGroups.Count)_net9"] = @{
                  'unocheckArguments' = '--pre-major'
                  'validations' = $currentGroup -join "`r`n"
                };
                $currentGroup = @()
              }
          }

          $matrixAsJson = $matrixGroups | ConvertTo-Json -Compress

          echo "json: $matrixAsJson"

          echo "##vso[task.setvariable variable=groups;isOutput=true]$matrixAsJson"

        name: TestMatrix

- job: Packages_Validation_${{ parameters.stageVariant }}
  dependsOn: Matrix_Gen_${{ parameters.stageVariant }}

  pool:
    vmImage: ${{ parameters.vmImage }}

  strategy:
    matrix: $[ dependencies.Matrix_Gen_${{ parameters.stageVariant }}.outputs['TestMatrix.groups'] ]

  variables:
    - name: UseDotNetNativeToolchain
      value: false
    - name: unocheckArguments
      value: ''

  steps:
  - template: templates/package-validation.yml     
    parameters:
      xCodeRoot: '/Applications/Xcode_15.2.app'
      arguments: $(validations)
      unocheckArguments: $(unocheckArguments)
